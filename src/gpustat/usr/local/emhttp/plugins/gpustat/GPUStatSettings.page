Menu="Utilities"
Icon="gpustat.png"
Title="GPU Statistics"
---

<?php
$settings = array(
    "Common" => array(
        "GPU and Memory Clocks" => "DISPCLOCKS",
        "PCI/IMC Utilization" => "DISPPCIUTIL",
        "Power Draw" => array(
            "name" => "DISPPWRDRAW",
            "options" => array(
                "GPU" => "GPU",
                "PACKAGE" => "PACKAGE",
                "MAX" => "MAX",
            ),
        ),
        "Power State" => "DISPPWRSTATE",
        "Memory Utilization" => "DISPMEMUSEDUTIL",
        "Temperature" => "DISPTEMP",
        "Fan Usage" => "DISPFAN",
    ),
    "Nvidia" => array(
        "Encoder / Decoder Utilization" => "DISPENCDEC",
        "Throttle Status" => "DISPTHROTTLE",
        "Active Sessions" => "DISPSESSIONS",
    ),
    "Intel" => array(
        "3D Render Load" => "DISP3DRENDER",
        "Blitter Load" => "DISPBLITTER",
        "Video Load" => "DISPVIDEO",
        "Video Enhance Load" => "DISPVIDENH",
        "Interrupts Per Second" => "DISPINTERRUPT",
    ),
    "AMD" => array(
        "Event Engine Usage" => "DISPEVENT",
        "Vertex Tesselator Usage" => "DISPVERTEX",
        "Texture Addresser Usage" => "DISPTEXTURE",
        "Shader Export Usage" => "DISPSHADEREXP",
        "Sequencer Cache Usage" => "DISPSEQUENCER",
        "Shader Interpolator Usage" => "DISPSHADERINTER",
        "Scan Converter Usage" => "DISPSCANCON",
        "Primitive Assembly Usage" => "DISPPRIMASSEM",
        "Depth Block Usage" => "DISPDEPTHBLK",
        "Color Block Usage" => "DISPCOLORBLK",
        "UVD" => "DISPUVD",
        "VCE0" => "DISPVCE0",
        "Graphics Translation Usage" => "DISPGTTUSEDUTIL",
    ),
);

//error_reporting(E_ALL);
//ini_set('display_errors', '1');

function save_ini_file($file, $array) {
    $plugin = "gpustat";

    $res = array();
    foreach($array as $key => $val) {
        if(is_array($val)) {
            $res[] = PHP_EOL."[$key]";
            foreach($val as $skey => $sval) $res[] = "$skey = ".(is_numeric($sval) ? $sval : '"'.$sval.'"');
        } else {
            $res[] = "$key = ".(is_numeric($val) ? $val : '"'.$val.'"');
        }
    }

    /* Write changes to tmp file. */
    file_put_contents($file, implode(PHP_EOL, $res));

    /* Write changes to flash. */
    $file_path = pathinfo($file);
    if ($file_path['extension'] == "cfg") {
        file_put_contents("/boot/config/plugins/".$plugin."/".basename($file), implode(PHP_EOL, $res));
    }
}

function save_cfg($val, $gpus, $settings) {
    $json_array = array();
    foreach ($val['MULTIGPU'] as $pciid) {
        $gpupciid = $pciid;
        $json_array[$gpupciid]['id'] = $gpus[$gpupciid]['id'];
        $json_array[$gpupciid]['model'] = $gpus[$gpupciid]['model'];
        $json_array[$gpupciid]['vendor'] = $gpus[$gpupciid]['vendor'];
        $json_array[$gpupciid]['guid'] = $gpus[$gpupciid]['guid'];
        $json_array[$gpupciid]['bridge_chip'] = $gpus[$gpupciid]['bridge_chip'];

        // Update the stats array
        $json_array[$gpupciid]['stats'] = array();

        $gpuid = str_replace(".", "_", $gpus[$gpupciid]['id']); // Replace period with underscore in GPU ID PHP issue
        foreach ($settings as $section => $sectionSettings) {
            foreach ($sectionSettings as $label => $settingData) {
                if (is_array($settingData)) {
                    $settingNameWithGPU = $settingData['name'] . '_' . $gpuid . '_SEL'; // Append GPU ID to the setting name
                    $selectedOption = $val[$settingNameWithGPU];
                    $json_array[$gpupciid]['stats'][$settingData['name']] = $selectedOption;
                } else {
                    $settingNameWithGPU = $settingData . '_' . $gpuid; // Append GPU ID to the setting name
                    $json_array[$gpupciid]['stats'][$settingData] = $val[$settingNameWithGPU];
                }
                unset($val[$settingNameWithGPU]);
            }
        }
    }

    $val["MULTIGPUJSON"] = urlencode(json_encode($json_array));

    if (isset($val['MULTIGPU'])) {
        if ($val['MULTIGPU'] != "") {
            $val['MULTIGPU'] = implode(",", $val['MULTIGPU']);
        }
    } else {
        $val['MULTIGPU'] = "";
    }

    save_ini_file("gpustat.cfg", $val);
}

$cfg = $gpustat_cfg = parse_plugin_cfg("gpustat", true);
$gpustat_inventory = true;

if (!isset($gpustat_cfg["MULTIGPUJSON"])) {
    $gpustat_cfg["MULTIGPUJSON"] = "%7B%22%22%3A%7B%22id%22%3A%22None%22%2C%22model%22%3A%22None%22%2C%22vendor%22%3A%22None%22%2C%22guid%22%3A%22None%22%2C%22bridge_chip%22%3Anull%2C%22stats%22%3A%7B%22DISPCLOCKS%22%3A%221%22%2C%22DISPPCIUTIL%22%3A%221%22%2C%22DISPPWRDRAW%22%3A%221%22%2C%22DISPPWRSTATE%22%3A%221%22%2C%22DISPMEMUSEDUTIL%22%3A%221%22%2C%22DISPTEMP%22%3A%221%22%2C%22DISPFAN%22%3A%221%22%2C%22DISPENCDEC%22%3A%221%22%2C%22DISPTHROTTLE%22%3A%221%22%2C%22DISPSESSIONS%22%3A%221%22%2C%22DISP3DRENDER%22%3A%221%22%2C%22DISPBLITTER%22%3A%221%22%2C%22DISPVIDEO%22%3A%221%22%2C%22DISPVIDENH%22%3A%221%22%2C%22DISPINTERRUPT%22%3A%221%22%2C%22DISPPWRDRWSEL%22%3A%22GPU%22%2C%22DISPEVENT%22%3A%221%22%2C%22DISPVERTEX%22%3A%221%22%2C%22DISPTEXTURE%22%3A%221%22%2C%22DISPSHADEREXP%22%3A%221%22%2C%22DISPSEQUENCER%22%3A%221%22%2C%22DISPSHADERINTER%22%3A%221%22%2C%22DISPSCANCON%22%3A%221%22%2C%22DISPPRIMASSEM%22%3A%221%22%2C%22DISPDEPTHBLK%22%3A%221%22%2C%22DISPCOLORBLK%22%3A%221%22%2C%22DISPGTTUSEDUTIL%22%3A%221%22%7D%7D%7D";
}
$multigpus = json_decode(urldecode($gpustat_cfg["MULTIGPUJSON"]), true);

include_once './plugins/gpustat/gpustatus.php';

if (count($_POST)) {
    $cfg = NULL;
    if ($_POST['#apply'] == "_(Apply)_") {
        array_map(function($k, $v) use (&$cfg) { if($k[0] != "#") $cfg[$k] = $v; }, array_keys($_POST), $_POST );
        save_cfg($cfg, $gpustat_data, $settings);
        $gpustat_cfg = parse_plugin_cfg("gpustat", true);
        $multigpus = json_decode(urldecode($gpustat_cfg["MULTIGPUJSON"]), true);
        unset($_POST);
    }
}
?>
<script>
$(function() {
    $('#MULTIGPU').dropdownchecklist({emptyText:"_(None)_", width:166});
});
</script>

<h2><b>Runtime</b></h2>
<form markdown="1" name="gpustat" method="POST" >
<input type="hidden" name="#file" value="gpustat/gpustat.cfg" />

<style>
    /* Styles for the custom list-like appearance */
    .gpu-custom-list {
        list-style: none;
        width: 500px;
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 0;
        max-height: 150px;
        overflow-y: auto;
    }

    .gpu-custom-list li {
        cursor: pointer;
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }
</style>

Unit ID for Dashboard(Multiple):
: <ul class="gpu-custom-list" id="gpu-list">
<?php
if (isset($gpustat_data)) {
    foreach ($gpustat_data as $gpu) {
        $gpudesc = sprintf(
            '%s: %s%s%s',
            $gpu['id'],
            $gpu['model'],
            isset($gpu['bridge_chip']) ? ' - ' . $gpu['bridge_chip'] : '', // Include '- $gpu['bridge_chip']' if it exists
            isset($gpu['guid']) ? ' - ' . $gpu['guid'] : '' // Include '- $gpu['guid']' if it exists
        );
        $gpuid = $gpu['id'];
        $checked = in_array($gpuid, explode(',', $gpustat_cfg['MULTIGPU'])) ? " checked" : "";
        echo "<li><input type='checkbox' name='MULTIGPU[]' value='$gpuid'$checked> $gpudesc</li>";
    }
}
?>
</ul>
<br>

Temperature Format:
: <select id="TEMPFORMAT" name="TEMPFORMAT" size="1">
    <?=mk_option($gpustat_cfg['TEMPFORMAT'], "C", "Celsius");?>
    <?=mk_option($gpustat_cfg['TEMPFORMAT'], "F", "Fahrenheit");?>
</select>

UI Automatic Refresh / Interval (Milliseconds):
: <select id="UIREFRESH" name="UIREFRESH" size="1">
    <?=mk_option($gpustat_cfg['UIREFRESH'], "0", "No");?>
    <?=mk_option($gpustat_cfg['UIREFRESH'], "1", "Yes");?>
</select>
<input type="text" name="UIREFRESHINT" class="narrow" maxlength="5" value="<?=$gpustat_cfg['UIREFRESHINT'];?>" placeholder="1000">
<br>

<h4><b>Settings</b></h4>
<?php
foreach ($multigpus as $gpu) {
    $gpumodel = $gpu['model'];
    //$gpuid = $gpu['id'];
    $gpuid = str_replace(".", "_", $gpu['id']); // Replace period with underscore in GPU ID PHP issue
    echo '<li class="section">';
    echo '<label class="section-label">Settings for GPU ' . $gpumodel . '</label>';
    echo '<ul class="setting-list">';
    foreach ($settings as $sectionSettings) {
        foreach ($sectionSettings as $label => $settingData) {
            echo '<li>';
            if (is_array($settingData)) {
                $settingNameWithGPU = $settingData['name'] . '_' . $gpuid . '_SEL'; // Append GPU ID to the setting name
                echo '<label>' . $label . '</label>';
                echo '<select name="' . $settingNameWithGPU . '_SEL">';
                foreach ($settingData['options'] as $optionValue => $optionLabel) {
                    $selected = ($gpu['stats'][$settingData['name']] == $optionValue) ? 'selected' : '';
                    echo '<option value="' . $optionValue . '" ' . $selected . '>' . $optionLabel . '</option>';
                }
                echo '</select>';
            } else {
                $settingNameWithGPU = $settingData . '_' . $gpuid; // Append GPU ID to the setting name
                $isChecked = ($gpu['stats'][$settingData] == 1) ? 'checked' : '';
                echo '<input type="hidden" name="' . $settingNameWithGPU . '" value="0">';
                echo '<input type="checkbox" name="' . $settingNameWithGPU . '" value="1" ' . $isChecked . '>';
                echo '<label>' . $label . '</label>';
            }
            echo '</li>';
        }
    }
    echo '</ul>';
    echo '</li>';
    // Display the GPU array for debugging
    // echo '<li>';
    // echo '<pre>';
    // print_r($gpu);
    // echo '</pre>';
    // echo '</li>';
}

?>

<br>

Debug:
: <select id="UIDEBUG" name="UIDEBUG" size="1">
    <?= mk_option($gpustat_cfg['UIDEBUG'], "0", "No"); ?>
    <?= mk_option($gpustat_cfg['UIDEBUG'], "1", "Yes"); ?>
</select>

<br><br><br>
<br>
: <input id="btnApply" type="submit" name="#apply" value="_(Apply)_"><input type="button" value="Done" onClick="done()">
<br><br><br>
Note: Where noted, not all metrics are provided by the vendor utilities and this plugin cannot magically make that work.
<br><br>
**Metric is available for discrete AMD GPUs and not APUs
</form>

<script>
function setDynamicListHeight() {
    var gpuList = document.getElementById('gpu-list');
    var listItems = gpuList.getElementsByTagName('li');
    var totalHeight = 0;

    for (var i = 0; i < listItems.length; i++) {
        totalHeight += listItems[i].offsetHeight;
    }

    gpuList.style.maxHeight = totalHeight + 'px';
}

// Call the function when the page loads
window.addEventListener('load', setDynamicListHeight);
</script>
